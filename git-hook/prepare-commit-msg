#!/bin/bash

if [ -z $2 ]
then
    echo > $1
    echo "# Each commit message consists of a header, a body and a footer." >> $1
    echo "# Header format is of the following “<type>(<scope>): <subject>” (scope is optional)" >> $1
    echo "# exemple -> :build:(npm) update linter version"
    echo >> $1
    echo "# Available types" >> $1
    echo "# :revert: -> Reverts a previous commit (same header as prev commit & SHA in body)" >> $1
    echo "# :build: -> Changes that affect the build system or external dependencies" >> $1
    echo "# :ci: -> Changes to our CI configuration files and scripts" >> $1
    echo "# :docs: -> Documentation only changes" >> $1
    echo "# :feat: -> A new feature" >> $1
    echo "# :fix: -> A bug fix" >> $1
    echo "# :perf: -> A code change that improves performance" >> $1
    echo "# :refactor: -> A code change that neither fixes a bug nor adds a feature" >> $1
    echo "# :style: -> Changes that do not affect the meaning of the code" >> $1
    echo "# :test: -> Adding missing tests or correcting existing tests" >> $1
fi

FILE=$1
MESSAGE=$(cat $FILE)
TICKET=[$(git rev-parse --abbrev-ref HEAD | grep -Eo '^(\w+/)?(\w+)' | grep -Eo '(\w+$)' | tr "[:lower:]" "[:upper:]")]
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
BRANCH_NAME_TO_CHECK_REBASE=$(git branch | grep '*' | sed 's/* //')
IFS="/" read -a BRANCH_NAME_FILTER_SLASH <<< $BRANCH_NAME
if [ -v ${BRANCH_NAME_FILTER_SLASH[1]} ];
then
  IFS="-" read -a BRANCH_NAME_FILTER_MINUS <<< ${BRANCH_NAME_FILTER_SLASH[0]};
else
  IFS="-" read -a BRANCH_NAME_FILTER_MINUS <<< ${BRANCH_NAME_FILTER_SLASH[1]}
fi

if [[ $TICKET == "[]" || "$MESSAGE" == "$TICKET"* || $BRANCH_NAME != '(no branch)' ]];then
  exit 0;
fi

# use name with 1 items:
# # Ex: feat/anhemta-cuoc1-song-ma -> anhemta
# echo "[${BRANCH_NAME_FILTER_MINUS[0]^^}] $MESSAGE" > $FILE

# use name with 2 items:
# Ex: feat/anhemta-cuoc1-song-ma -> anhemta-cuoc1
echo "[${BRANCH_NAME_FILTER_MINUS[0]^^}-${BRANCH_NAME_FILTER_MINUS[1]^^}] $MESSAGE" > $FILE
